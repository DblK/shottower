/*
shottower
Copyright (C) 2022-2023 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/creasty/defaults"
)

// Timeline - A timeline represents the contents of a video edit over time, an audio edit over time, in seconds, or an image layout. A timeline consists of layers called tracks. Tracks are composed of titles, images, audio, html or video segments referred to as clips which are placed along the track at specific starting point and lasting for a specific amount of time.
type Timeline struct {
	Soundtrack *Soundtrack `json:"soundtrack,omitempty"`

	// A hexadecimal value for the timeline background color. Defaults to #000000 (black).
	Background string `json:"background,omitempty" default:"#000000"`

	// An array of custom fonts to be downloaded for use by the HTML assets.
	Fonts []Font `json:"fonts,omitempty"`

	// A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
	Tracks []Track `json:"tracks"`

	// Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.io/docs/guide/architecting-an-application/caching) for more details.
	Cache bool `json:"cache,omitempty" default:"true"`
}

// AssertTimelineRequired checks if the required fields are not zero-ed
func AssertTimelineRequired(obj *Timeline) error {
	elements := map[string]interface{}{
		"tracks": obj.Tracks,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Schema: "Timeline", Field: name}
		}
	}

	if err := defaults.Set(obj); err != nil {
		panic(err)
	}

	if err := AssertSoundtrackRequired(obj.Soundtrack); err != nil {
		return err
	}
	for i := range obj.Fonts {
		if err := AssertFontRequired(&obj.Fonts[i]); err != nil {
			return err
		}
	}
	for i := range obj.Tracks {
		if err := AssertTrackRequired(&obj.Tracks[i]); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseTimelineRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Timeline (e.g. [][]Timeline), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTimelineRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTimeline, ok := obj.(Timeline)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTimelineRequired(&aTimeline)
	})
}
