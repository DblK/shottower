/*
shottower
Copyright (C) 2022 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)

// DownloadApiRouter defines the required methods for binding the api requests to a responses for the DownloadApi
// The DownloadApiRouter implementation should parse necessary information from the http request,
// pass the data to a DownloadApiServicer to perform the required actions, then write the service results to the http response.
type DownloadAPIRouter interface {
	DownloadByID(http.ResponseWriter, *http.Request)
}

// EditAPIRouter defines the required methods for binding the api requests to a responses for the EditApi
// The EditAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EditAPIServicer to perform the required actions, then write the service results to the http response.
type EditAPIRouter interface {
	DeleteTemplate(http.ResponseWriter, *http.Request)
	GetRender(http.ResponseWriter, *http.Request)
	GetTemplate(http.ResponseWriter, *http.Request)
	GetTemplates(http.ResponseWriter, *http.Request)
	PostRender(http.ResponseWriter, *http.Request)
	PostTemplate(http.ResponseWriter, *http.Request)
	PostTemplateRender(http.ResponseWriter, *http.Request)
	Probe(http.ResponseWriter, *http.Request)
	PutTemplate(http.ResponseWriter, *http.Request)
}

// ServeAPIRouter defines the required methods for binding the api requests to a responses for the ServeApi
// The ServeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ServeAPIServicer to perform the required actions, then write the service results to the http response.
type ServeAPIRouter interface {
	DeleteAsset(http.ResponseWriter, *http.Request)
	GetAsset(http.ResponseWriter, *http.Request)
	GetAssetByRenderID(http.ResponseWriter, *http.Request)
}

// DownloadApiServicer defines the api actions for the DownloadApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DownloadAPIServicer interface {
	DownloadByID(context.Context, string) (ImplResponse, error)
}

// EditAPIServicer defines the api actions for the EditApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EditAPIServicer interface {
	DeleteTemplate(context.Context, string) (ImplResponse, error)
	GetRender(context.Context, string, bool, bool) (ImplResponse, error)
	GetTemplate(context.Context, string) (ImplResponse, error)
	GetTemplates(context.Context) (ImplResponse, error)
	PostRender(context.Context, Edit) (ImplResponse, error)
	PostTemplate(context.Context, Template) (ImplResponse, error)
	PostTemplateRender(context.Context, TemplateRender) (ImplResponse, error)
	Probe(context.Context, string) (ImplResponse, error)
	PutTemplate(context.Context, string, Template) (ImplResponse, error)

	GetQueue() []*RenderQueue
	GetQueuePending() []*RenderQueue
}

// ServeAPIServicer defines the api actions for the ServeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ServeAPIServicer interface {
	DeleteAsset(context.Context, string) (ImplResponse, error)
	GetAsset(context.Context, string) (ImplResponse, error)
	GetAssetByRenderID(context.Context, string) (ImplResponse, error)
}

// ProcessingQueuer defines the queue actions while processing new renders
type ProcessingQueuer interface {
	StartProcessQueue(EditAPIServicer)
}
