/*
shottower
Copyright (C) 2022 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Thumbnail - Generate a thumbnail image for the video or image at a specific point from the timeline.
type Thumbnail struct {

	// The point on the timeline in seconds to capture a single frame to use as the thumbnail image.
	Capture float32 `json:"capture"`

	// Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale  the thumbnail to half the size of the viewport.
	Scale float32 `json:"scale"`
}

func (s *Thumbnail) checkEnumValues() error {
	if s.Capture < 0 {
		return &EnumError{Schema: "Thumbnail", Field: "Capture", Value: s.Capture}
	}
	if s.Scale < 0 {
		return &EnumError{Schema: "Thumbnail", Field: "Scale", Value: s.Scale}
	}

	return nil
}

// AssertThumbnailRequired checks if the required fields are not zero-ed
func AssertThumbnailRequired(obj *Thumbnail) error {
	if obj == nil {
		return nil
	}

	elements := map[string]interface{}{
		"capture": obj.Capture,
		"scale":   obj.Scale,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Schema: "Thumbnail", Field: name}
		}
	}

	if err := obj.checkEnumValues(); err != nil {
		return err
	}

	return nil
}

// AssertRecurseThumbnailRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Thumbnail (e.g. [][]Thumbnail), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseThumbnailRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aThumbnail, ok := obj.(Thumbnail)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertThumbnailRequired(&aThumbnail)
	})
}
