/*
shottower
Copyright (C) 2022-2023 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import "github.com/spf13/cast"

// Poster - Generate a poster image for the video at a specific point from the timeline. The poster image size will match the size of the output video.
type Poster struct {

	// The point on the timeline in seconds to capture a single frame to use as the poster image.
	Capture float32 `json:"capture"`
}

func NewPoster(m map[string]interface{}) *Poster {
	poster := &Poster{}

	if m["capture"] != nil {
		poster.Capture = cast.ToFloat32(m["capture"].(float64))
	}
	return poster
}

func (s *Poster) checkEnumValues() error {
	if s.Capture < 0 {
		return &EnumError{Schema: "Poster", Field: "Capture", Value: s.Capture}
	}

	return nil
}

// AssertPosterRequired checks if the required fields are not zero-ed
func AssertPosterRequired(obj *Poster) error {
	if obj == nil {
		return nil
	}
	elements := map[string]interface{}{
		"capture": obj.Capture,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Schema: "Poster", Field: name}
		}
	}

	if err := obj.checkEnumValues(); err != nil {
		return err
	}

	return nil
}

// AssertRecursePosterRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Poster (e.g. [][]Poster), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePosterRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPoster, ok := obj.(Poster)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPosterRequired(&aPoster)
	})
}
