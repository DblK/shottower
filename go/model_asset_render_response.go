/*
shottower
Copyright (C) 2022-2023 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// AssetRenderResponse - The response returned by the Serve API [get asset by render id](#get-asset-by-render-id) request. The response  is an array of asset resources, including video, image, audio, thumbnail and poster image. The response follows  the [json:api](https://jsonapi.org/) specification.
type AssetRenderResponse struct {

	// An array of asset resources grouped by render id.
	Data []AssetResponseData `json:"data"`
}

// AssertAssetRenderResponseRequired checks if the required fields are not zero-ed
func AssertAssetRenderResponseRequired(obj AssetRenderResponse) error {
	elements := map[string]interface{}{
		"data": obj.Data,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Schema: "Asset Render Response", Field: name}
		}
	}

	for _, el := range obj.Data {
		if err := AssertAssetResponseDataRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseAssetRenderResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AssetRenderResponse (e.g. [][]AssetRenderResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAssetRenderResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAssetRenderResponse, ok := obj.(AssetRenderResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAssetRenderResponseRequired(aAssetRenderResponse)
	})
}
