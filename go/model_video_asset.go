/*
shottower
Copyright (C) 2022 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/creasty/defaults"
)

// VideoAsset - The VideoAsset is used to create video sequences from video files. The src must be a publicly accessible URL to a video resource such as an mp4 file.
type VideoAsset struct {

	// The type of asset - set to `video` for videos.
	Type string `json:"type"`

	// The video source URL. The URL must be publicly accessible or include credentials.
	Src string `json:"src"`

	// The start trim point of the video clip, in seconds (defaults to 0). Videos will start from the in trim point. The video will play until the file ends or the Clip length is reached.
	Trim float32 `json:"trim,omitempty" default:"0"`

	// Set the volume for the video clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 0).
	Volume float32 `json:"volume,omitempty" default:"0"`

	Crop *Crop `json:"crop,omitempty"`

	Subtitle *Subtitle `json:"subtitle,omitempty"`
}

// AssertVideoAssetRequired checks if the required fields are not zero-ed
func AssertVideoAssetRequired(obj VideoAsset) error {
	elements := map[string]interface{}{
		"type": obj.Type,
		"src":  obj.Src,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Schema: "Video Asset", Field: name}
		}
	}

	if err := defaults.Set(obj); err != nil {
		panic(err)
	}

	if obj.Src == "" {
		return &RequiredError{Schema: "Video Asset", Field: "src"}
	}

	if err := AssertCropRequired(obj.Crop); err != nil {
		return err
	}
	if err := AssertSubtitleRequired(obj.Subtitle); err != nil {
		return err
	}
	return nil
}

// AssertRecurseVideoAssetRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of VideoAsset (e.g. [][]VideoAsset), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseVideoAssetRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aVideoAsset, ok := obj.(VideoAsset)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertVideoAssetRequired(aVideoAsset)
	})
}
