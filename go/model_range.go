/*
shottower
Copyright (C) 2022 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Range - Specify a time range to render, i.e. to render only a portion of a video or audio file. Omit this setting to  export the entire video. Range can also be used to render a frame at a specific time point - setting a range and output format as `jpg` will output a single frame image at the range `start` point.
type Range struct {

	// The point on the timeline, in seconds, to start the render from - i.e. start at second 3.
	Start *float32 `json:"start,omitempty"`

	// The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.
	Length *float32 `json:"length,omitempty"`
}

func (s *Range) checkEnumValues() error {
	if s.Start != nil {
		if *s.Start < 0 {
			return &EnumError{Schema: "Range", Field: "Start", Value: *s.Start}
		}
	}

	if s.Length != nil {
		if *s.Length < 0 {
			return &EnumError{Schema: "Range", Field: "Length", Value: *s.Length}
		}
	}

	return nil
}

// AssertRangeRequired checks if the required fields are not zero-ed
func AssertRangeRequired(obj *Range) error {
	if obj == nil {
		return nil
	}

	if err := obj.checkEnumValues(); err != nil {
		return err
	}

	return nil
}

// AssertRecurseRangeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Range (e.g. [][]Range), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRangeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRange, ok := obj.(Range)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRangeRequired(&aRange)
	})
}
