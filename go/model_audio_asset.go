/*
shottower
Copyright (C) 2022 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import "github.com/spf13/cast"

// AudioAsset - The AudioAsset is used to add sound effects and audio at specific intervals on the timeline. The src must be a publicly accessible URL to an audio resource such  as an mp3 file.
type AudioAsset struct {

	// The type of asset - set to `audio` for audio assets.
	Type string `json:"type"`

	// The audio source URL. The URL must be publicly accessible or include credentials.
	Src string `json:"src"`

	// The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.
	Trim float32 `json:"trim,omitempty"`

	// Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
	Volume float32 `json:"volume,omitempty"`

	// The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
	Effect string `json:"effect,omitempty"`
}

func NewAudioAsset(m map[string]interface{}) *AudioAsset {
	audioAsset := &AudioAsset{
		Type: m["type"].(string),
	}

	if m["src"] != nil {
		audioAsset.Src = m["src"].(string)
	}
	if m["trim"] != nil {
		audioAsset.Trim = cast.ToFloat32(m["trim"].(float64))
	}
	if m["volume"] != nil {
		audioAsset.Volume = cast.ToFloat32(m["volume"].(float64))
	}
	if m["effect"] != nil {
		audioAsset.Effect = m["effect"].(string)
	}
	return audioAsset
}

// AssertAudioAssetRequired checks if the required fields are not zero-ed
func AssertAudioAssetRequired(obj AudioAsset) error {
	elements := map[string]interface{}{
		"type": obj.Type,
		"src":  obj.Src,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Schema: "Audio", Field: name}
		}
	}

	return nil
}

// AssertRecurseAudioAssetRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AudioAsset (e.g. [][]AudioAsset), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAudioAssetRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAudioAsset, ok := obj.(AudioAsset)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAudioAssetRequired(aAudioAsset)
	})
}
