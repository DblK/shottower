/*
shottower
Copyright (C) 2022-2023 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import "github.com/spf13/cast"

// SkewTransformation - Skew a clip so its edges are sheared at an angle. Use values between 0 and 3. Over 3 the clip will be skewed almost flat.
type SkewTransformation struct {

	// Skew the clip along it's x axis.
	X float32 `json:"x,omitempty"`

	// Skew the clip along it's y axis.
	Y float32 `json:"y,omitempty"`
}

func NewSkewTransformation(m map[string]interface{}) *SkewTransformation {
	transform := &SkewTransformation{}

	if m["x"] != nil {
		transform.X = cast.ToFloat32(m["x"].(float64))
	}
	if m["y"] != nil {
		transform.X = cast.ToFloat32(m["x"].(float64))
	}
	return transform
}

func (s *SkewTransformation) checkEnumValues() error {
	if s.X < 0 || s.X > 3 {
		return &EnumError{Schema: "Soundtrack", Field: "X", Value: s.X}
	}
	if s.Y < 0 || s.Y > 3 {
		return &EnumError{Schema: "Soundtrack", Field: "Y", Value: s.Y}
	}

	return nil
}

// AssertSkewTransformationRequired checks if the required fields are not zero-ed
func AssertSkewTransformationRequired(obj SkewTransformation) error {
	if err := obj.checkEnumValues(); err != nil {
		return err
	}

	return nil
}

// AssertRecurseSkewTransformationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SkewTransformation (e.g. [][]SkewTransformation), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSkewTransformationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSkewTransformation, ok := obj.(SkewTransformation)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSkewTransformationRequired(aSkewTransformation)
	})
}
