/*
shottower
Copyright (C) 2022 RÃ©my Boulanouar

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * Shottower
 *
 * Shottower is the open source version of Shotstack which is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shottower](https://github.com/DblK/shottower) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>http://0.0.0.0:4000/{version}</b>  The Serve API base URL is: <b>http://0.0.0.0:4000/serve/{version}</b>
 *
 * API version: stage
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"

	"github.com/DblK/shottower/config"
	openapi "github.com/DblK/shottower/go"
)

func main() {
	log.Printf("Server started")

	myConfig := config.NewShottowerConfig("http://0.0.0.0:4000", config.Stage)

	EditAPIService := openapi.NewEditAPIService(myConfig)
	EditAPIController := openapi.NewEditAPIController(EditAPIService)

	DownloadAPIService := openapi.NewDownloadAPIService(myConfig, EditAPIService)
	DownloadAPIController := openapi.NewDownloadAPIController(DownloadAPIService)

	ServeAPIService := openapi.NewServeAPIService(myConfig)
	ServeAPIController := openapi.NewServeAPIController(ServeAPIService)

	router := openapi.NewRouter(EditAPIController, ServeAPIController, DownloadAPIController)

	QueueService := openapi.NewProcessingQueuer(myConfig)
	QueueService.StartProcessQueue(EditAPIService)

	log.Fatal(http.ListenAndServe(":4000", router))
}
